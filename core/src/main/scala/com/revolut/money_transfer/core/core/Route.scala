
package com.revolut.money_transfer.core.core

import java.util.UUID
import java.util.concurrent.locks.ReentrantLock

import akka.actor.ActorRef

object ROUTE_STATE extends Enumeration {
  val INCOMPLETE = Value("INCOMPLETE")
  val COMPLETE = Value("COMPLETE")
}

/*
  Initializes only one time during request execution process by RouteGenerator
  Route class represents individual route/request in action.
  Each route is identified using an ID generated for a particular request.
  The id is generated by orchestrator and all task under one request workflow
  share the id.
 */

class Route(val transactionId: UUID, val actorRef: ActorRef) {

  private var _state = ROUTE_STATE.INCOMPLETE
  private val _routeLock = new ReentrantLock

  def state: ROUTE_STATE.Value = _state

  def state_=(state: ROUTE_STATE.Value): Unit = _state = state

  def lock(): Unit = _routeLock.lock()

  def unlock(): Unit = _routeLock.unlock()

}
