
package com.revolut.money_transfer.core.core

import java.util.UUID
import java.util.concurrent.locks.ReentrantLock

object TASK_STATE extends Enumeration {

  type STATE = Value

  /*
   * A task has three states,
   * DORMANT = Not Started or yet to be started.
   * RUNNING = Currently Executing
   * FINISHED_SUCCESSFULLY = Finished Successfully
   * FINISHED_UNSUCCESSFULLY = Finished UN-Successfully
   */

  val DORMANT = Value("DORMANT")
  val RUNNING = Value("RUNNING")
  val FINISHED_SUCCESSFULLY = Value("FINISHED_SUCCESSFULLY")
  val FINISHED_UNSUCCESSFULLY = Value("FINISHED_UNSUCCESSFULLY")
  val TERMINATED = Value("TERMINATED")
  val completeStates = Set(TASK_STATE.FINISHED_SUCCESSFULLY,
    TASK_STATE.FINISHED_UNSUCCESSFULLY)
}

/*
  Task class represents individual task in action.
  Each task is identified using an ID created during a request.
  The id is generated by orchestrator and all task under one request workflow
  share the id. The execName is the unique key that identifies a node in a DAG
 */

class Task(val transactionId: UUID, val executorName: String) {

  private var _state = TASK_STATE.DORMANT
  private val _taskLock = new ReentrantLock

  def lock(): Unit = _taskLock.lock()

  def unlock(): Unit = _taskLock.unlock()

  def state: TASK_STATE.Value = _state

  def state_=(task_state: TASK_STATE.Value): Unit = _state = task_state

}
