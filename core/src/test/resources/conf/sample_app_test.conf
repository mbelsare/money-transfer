targetEnv = test

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  test.timefactor = 5.0
  akka.log-dead-letter = false
  akka.log-dead-letters-during-shutdown = false

  actor {
    core-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
      # Configuration for the thread pool
      thread-pool-executor {
        # minimum number of threads to cap factor-based core number to
        core-pool-size-min = 1
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 2.0
        # maximum number of threads to cap factor-based number to
        core-pool-size-max = 2
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 1
    }
  }
}

loggingMetaTags {
  constant {
    "constantKeyA" = "valueA"
    "constantKeyB" = "valueB"
  }
  runtime = [
    "runtimeKeyA",
    "runtimeKeyB"
  ]
}

test {
  service {
    retries = 0
    targetEnv = test
    accountsFilePath = "plugins/src/test/resources/test_accounts.json"
    withdraw {
      accountKey = "accountId"
    }
    deposit {
      accountKey = "body.depositAccountId"
    }
    db {
      database = "testDB"
      schema = "testScehma"
      table = "accounts"
      username = "root"
      password = "root"
      host = "localhost"
      port = "8000"
      sslmode = "disable"
      connectTimeout = "2"
      socketTimeout = "2"
      statementTimeout = "200"
      schemaSQL = ""
    }
  }
}
